// 26. 删除有序数组中的重复项
// 给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。

// 由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。

// 将最终结果插入 nums 的前 k 个位置后返回 k 。

// 示例 1：

// 输入：nums = [1,1,2]
// 输出：2, nums = [1,2,_]
// 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
// 示例 2：

// 输入：nums = [0,0,1,1,1,2,2,3,3,4]
// 输出：5, nums = [0,1,2,3,4]
// 解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。

// 来源：力扣（LeetCode）
// 链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array
// 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

function removeDuplicates(nums: number[]): number {
  let q = 0;
  let s = 0;
  while(q < nums.length) {
    q++;
    if (nums[q] !== nums[s]) {
      s++;
      nums[s] = nums[q];
    }
  }

  return s;
};

// 思路：
// 使用快慢指针，让快指针 q 先走一步，如果 nums[q] = nums[s] 的话，慢指针不动，当下标 q 对应的数字不等于下标 s 的数字时，
// 慢指针向前移动一位，让下标 s 的值等于快指针 q 位置的值。直到快指针走完后遍历结束